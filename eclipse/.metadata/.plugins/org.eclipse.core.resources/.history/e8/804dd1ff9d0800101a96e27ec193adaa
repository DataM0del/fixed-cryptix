package cryptix.gui.clickgui;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collections;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.ScaledResolution;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.util.ResourceLocation;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import cryptix.Client;
import cryptix.gui.clickgui.element.Element;
import cryptix.gui.clickgui.element.ModuleButton;
import cryptix.gui.clickgui.element.elements.Slider;
import cryptix.gui.clickgui.util.ColorUtil;
import cryptix.gui.clickgui.util.FontUtil;
import cryptix.module.Category;
import cryptix.module.Module;

public class ClickGUI extends GuiScreen {
    private static ArrayList<Panel> panels;
    private static ArrayList<Panel> reversedPanels;
    private ModuleButton moduleButton;
    private SettingsManager settingsManager;

    public ClickGUI() {
        settingsManager = Client.instance.settingsManager;
        FontUtil.setupFontUtils();
        panels = new ArrayList<>();
        initializePanels();
    }

    private void initializePanels() {
        double panelWidth = 90;
        double panelHeight = 15;
        double posX = 10;
        double posY = 10;
        double yIncrement = panelHeight + 10;

        for (Category category : Category.values()) {
            String title = formatCategoryTitle(category);
            panels.add(new Panel(title, posX, posY, panelWidth, panelHeight, false, this) {
                @Override
                public void setup() {
                    for (Module module : Client.instance.moduleManager.getModules()) {
                        if (module.getCategory().equals(category)) {
                            this.Elements.add(new ModuleButton(module, this));
                        }
                    }
                }
            });
            posY += yIncrement;
        }

        reversedPanels = new ArrayList<>(panels);
        Collections.reverse(reversedPanels);
    }

    private String formatCategoryTitle(Category category) {
        String categoryName = category.name().toLowerCase();
        return Character.toUpperCase(categoryName.charAt(0)) + categoryName.substring(1);
    }

    @Override
    public void drawScreen(int mouseX, int mouseY, float partialTicks) {
        ScaledResolution resolution = new ScaledResolution(mc);
        this.drawRect(0, 0, resolution.getScaledWidth(), resolution.getScaledHeight(), 0x50000000);

        panels.forEach(panel -> panel.drawScreen(mouseX, mouseY, partialTicks));

        handleListeningModule(mouseX, mouseY, partialTicks);

        super.drawScreen(mouseX, mouseY, partialTicks);
    }

    private void handleListeningModule(int mouseX, int mouseY, float partialTicks) {
        moduleButton = null;
        for (Panel panel : panels) {
            if (panel != null && panel.visible && panel.extended && panel.Elements != null) {
                for (ModuleButton element : panel.Elements) {
                    if (element.listening) {
                        moduleButton = element;
                        break listening;
                    }
                }
            }
        }

        if (moduleButton != null) {
            showListeningOverlay(new ScaledResolution(mc));
        }

        for (Panel panel : panels) {
            if (panel.extended && panel.visible && panel.Elements != null) {
                panel.Elements.forEach(button -> {
                    if (button.extended && button.menuelements != null && !button.menuelements.isEmpty()) {
                        double offset = 0;
                        for (Element element : button.menuelements) {
                            element.offset = offset;
                            element.update();
                            element.drawScreen(mouseX, mouseY, partialTicks);
                            offset += element.height;
                        }
                    }
                });
            }
        }
    }

    private void showListeningOverlay(ScaledResolution resolution) {
        drawRect(0, 0, this.width, this.height, 0x88101010);
        GL11.glPushMatrix();
        GL11.glTranslatef(resolution.getScaledWidth() / 2, resolution.getScaledHeight() / 2, 0.0F);
        GL11.glScalef(4.0F, 4.0F, 0F);
        FontUtil.drawTotalCenteredStringWithShadow("Listening...", 0, -10, 0xffffffff);
        GL11.glScalef(0.5F, 0.5F, 0F);
        FontUtil.drawTotalCenteredStringWithShadow("Press 'ESCAPE' to unbind " + moduleButton.mod.getName() + 
            (moduleButton.mod.getKey() > -1 ? " (" + Keyboard.getKeyName(moduleButton.mod.getKey()) + ")" : ""),
            0, 0, 0xffffffff);
        GL11.glPopMatrix();
    }

    @Override
    public void mouseClicked(int mouseX, int mouseY, int mouseButton) {
        if (moduleButton != null) return;

        for (Panel panel : reversedPanels) {
            if (panel.extended && panel.visible && panel.Elements != null) {
                for (ModuleButton button : panel.Elements) {
                    if (button.extended) {
                        for (Element element : button.menuelements) {
                            if (element.mouseClicked(mouseX, mouseY, mouseButton)) return;
                        }
                    }
                }
            }
        }

        for (Panel panel : reversedPanels) {
            if (panel.mouseClicked(mouseX, mouseY, mouseButton)) return;
        }

        try {
            super.mouseClicked(mouseX, mouseY, mouseButton);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void mouseReleased(int mouseX, int mouseY, int state) {
        if (moduleButton != null) return;

        for (Panel panel : reversedPanels) {
            if (panel.extended && panel.visible && panel.Elements != null) {
                for (ModuleButton button : panel.Elements) {
                    if (button.extended) {
                        for (Element element : button.menuelements) {
                            element.mouseReleased(mouseX, mouseY, state);
                        }
                    }
                }
            }
        }

        for (Panel panel : reversedPanels) {
            panel.mouseReleased(mouseX, mouseY, state);
        }

        super.mouseReleased(mouseX, mouseY, state);
    }

    @Override
    protected void keyTyped(char typedChar, int keyCode) {
        for (Panel panel : reversedPanels) {
            if (panel != null && panel.visible && panel.extended && panel.Elements != null && !panel.Elements.isEmpty()) {
                for (ModuleButton button : panel.Elements) {
                    try {
                        if (button.keyTyped(typedChar, keyCode)) return;
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            }
        }

        try {
            super.keyTyped(typedChar, keyCode);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void onGuiClosed() {
        for (Panel panel : reversedPanels) {
            if (panel.extended && panel.visible && panel.Elements != null) {
                for (ModuleButton button : panel.Elements) {
                    if (button.extended) {
                        for (Element element : button.menuelements) {
                            if (element instanceof Slider) {
                                ((Slider) element).dragging = false;
                            }
                        }
                    }
                }
            }
        }
    }

    public void closeAllSettings() {
        for (Panel panel : reversedPanels) {
            if (panel != null && panel.visible && panel.extended && panel.Elements != null && !panel.Elements.isEmpty()) {
                for (ModuleButton button : panel.Elements) {
                    // button.extended = false;
                }
            }
        }
    }
}
