package cryptix.gui.clickgui;

import java.awt.Color;
import java.util.ArrayList;

import cryptix.Client;
import cryptix.gui.clickgui.element.ModuleButton;
import cryptix.gui.clickgui.util.FontUtil;
import cryptix.utils.render.RenderUtils;
import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;


public class Panel {
	public String title;
	public double x;
	public double y;
	private double x2;
	private double y2;
	public double width;
	public double height;
	public boolean dragging;
	public boolean extended = false;
	public boolean visible;
	public boolean wasExtended = false;
	public double currentHeight = 0;
	public ArrayList<ModuleButton> Elements = new ArrayList<>();
	public ClickGUI clickgui;

	public Panel(String ititle, double ix, double iy, double iwidth, double iheight, boolean iextended, ClickGUI parent) {
		this.title = ititle;
		this.x = ix;
		this.y = iy;
		this.width = iwidth;
		this.height = iheight;
		this.extended = iextended;
		this.dragging = false;
		this.visible = true;
		this.clickgui = parent;
		setup();
	}

	public void setup() {}

	public void drawScreen(int mouseX, int mouseY, float partialTicks) {
		if (!this.visible)
			return;

		if (this.dragging) {
			x = x2 + mouseX;
			y = y2 + mouseY;
		}
		float x = (float) this.x;
		float y = (float) this.y;
		float width = (float) this.width;
		float height = (float) this.height;
		if (this.extended && !Elements.isEmpty()) {
		    double startY = y + height + 1;
		    int epanelcolor = 0xFF232424;
		    double totalHeight = 0;
		    for (ModuleButton et : Elements) {
		        totalHeight += et.height + 3.8 + et.settHeight;
		    }
		    currentHeight += (totalHeight - currentHeight) * 0.1;
		    RenderUtils.drawRoundedRectangle(x, y, x + width, (float) (startY + totalHeight + 6), 12, 0xFF232424);
		    for (ModuleButton et : Elements) {
		        int etheight = (int) et.height;
		        int startYI = (int) startY;
		        et.x = x + 2;
		        et.y = startY;
		        et.width = width - 4;
		        et.drawScreen(mouseX, mouseY, partialTicks);
		        startY += et.height + 4 + et.settHeight;
		    }
			Gui.drawRect(x, y + 3, x + width, y + height, 0xFF181919);
			RenderUtils.drawRoundedRectangle(x, y - 2, x + width, y + height, 12, 0xFF181919);
		}else {
			currentHeight = 0;
			RenderUtils.drawRoundedRectangle(x, y - 2, x + width, y + height + 2, 12, 0xFF181919);
		}
		FontUtil.drawStringWithShadow(title, x + (width / 2) - (FontUtil.getStringWidth(title) / 2), (int) (y + (height / 2) - (FontUtil.getFontHeight() / 2)), -1);
	}

	public boolean mouseClicked(int mouseX, int mouseY, int mouseButton) {
		if (!this.visible) {
			return false;
		}
		if (mouseButton == 0 && isHovered(mouseX, mouseY)) {
			x2 = this.x - mouseX;
			y2 = this.y - mouseY;
			dragging = true;
			return true;
		} else if (mouseButton == 1 && isHovered(mouseX, mouseY)) {
			extended = !extended;
			return true;
		} else if (extended) {
			for (ModuleButton et : Elements) {
				if (et.mouseClicked(mouseX, mouseY, mouseButton)) {
					return true;
				}
			}
		}
		return false;
	}

	public void mouseReleased(int mouseX, int mouseY, int state) {
		if (!this.visible) {
			return;
		}
		if (state == 0) {
			this.dragging = false;
		}
	}

	public boolean isHovered(int mouseX, int mouseY) {
		return mouseX >= x && mouseX <= x + width && mouseY >= y && mouseY <= y + height;
	}
}
