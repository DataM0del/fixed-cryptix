package cryptix.module.player;

import java.awt.Color;

import cryptix.Client;
import cryptix.gui.clickgui.Setting;
import cryptix.module.Category;
import cryptix.module.Module;
import cryptix.utils.RotationUtils;
import cryptix.utils.Utils;
import cryptix.utils.render.RenderUtils;
import net.minecraft.block.Block;
import net.minecraft.block.BlockBed;
import net.minecraft.block.properties.IProperty;
import net.minecraft.block.state.IBlockState;
import net.minecraft.init.Blocks;
import net.minecraft.network.play.client.C07PacketPlayerDigging;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3i;

public class BedNuker extends Module{
	public BlockPos bedPos;
	private Setting range, delay, rotate, render;
	private double breakProgress, smoothProgress;
	private int delayTick, alpha, progTick;
	private boolean start;
	public boolean rotating;
	public BedNuker() {
		super("BedNuker", 0, Category.PLAYER);
		Client.instance.settingsManager.rSetting(range = new Setting("Range", this, 3, 3, 8, false));
		Client.instance.settingsManager.rSetting(delay = new Setting("Break Delay", this, 100, 0, 500, true));
		Client.instance.settingsManager.rSetting(rotate = new Setting("Only Rotate at Start and Stop", this, false));
		Client.instance.settingsManager.rSetting(render = new Setting("Render Progress", this, true));
	}
	
	@Override
	public void onDisable() {
		breakProgress = 0;
		smoothProgress = 0;
		bedPos = null;
	}
	
	@Override
	public void onEnable() {
		
	}
	
	@Override
	public void onPreMotion() {
		bedPos = findBed();
		delayTick++;
		rotating = false;
		if(bedPos != null && delayTick > delay.getValue() / 30) {
			breakBlock(bedPos);
			System.out.println(breakProgress);
		}else {
			breakProgress = 0;
		}
	}
	
	@Override
	public void onRender2D() {
		if(render.getBoolean() && (bedPos != null || alpha > 0)) {
			if(bedPos != null) {
				alpha = 255;
			}else {
				if(alpha != 0) {
					alpha -= 2;
				}
				if(alpha < 10) {
					alpha = 0;
				}
			}
			smoothProgress = Utils.lerp((float)smoothProgress, (float)breakProgress, breakProgress == 0 ? 0.1F : 0.05F);
			if(smoothProgress > 1.0) {
				smoothProgress = 1.0;
			}
			Module hud = Client.instance.moduleManager.getModuleByName("HUD");
			Setting c1r = Client.instance.settingsManager.getSettingByName(hud, "Color1 red"), c1g = Client.instance.settingsManager.getSettingByName(hud, "Color1 green"), c1b = Client.instance.settingsManager.getSettingByName(hud, "Color1 blue");
			Setting c2r = Client.instance.settingsManager.getSettingByName(hud, "Color2 red"), c2g = Client.instance.settingsManager.getSettingByName(hud, "Color2 green"), c2b = Client.instance.settingsManager.getSettingByName(hud, "Color2 blue");
			int color1 = new Color((int) c1r.getValue(),(int) c1g.getValue(),(int) c1b.getValue(),alpha).getRGB();
			int color2 = new Color((int) c2r.getValue(),(int) c2g.getValue(),(int) c2b.getValue(),alpha).getRGB();
			RenderUtils.drawRoundedRectangle(mc.displayWidth / 4 - 80, mc.displayHeight / 4 + 20, mc.displayWidth / 4 + 80, mc.displayHeight / 4 + 33, 10, new Color(0,0,0,100 / alpha).getRGB());
			RenderUtils.drawRoundedGradientRect(mc.displayWidth / 4 - 80, mc.displayHeight / 4 + 20, (float) (mc.displayWidth / 4 - 70 + (smoothProgress * 150)), mc.displayHeight / 4 + 33, 10, color1, color1, color2, color2);
		}
	}
	
	private void breakBlock(BlockPos pos) {
		if(rotate.getBoolean() && breakProgress == 0 || !rotate.getBoolean() && breakProgress >= 0) {
			rotate(pos);
		}
		if(breakProgress >= 0) {
			mc.theWorld.sendBlockBreakProgress(mc.thePlayer.getEntityId(), pos, (int) (breakProgress * 10 - 1));
			mc.thePlayer.swingItem();
		}
		if(breakProgress == 0) {
			start = false;
			mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.START_DESTROY_BLOCK, pos, EnumFacing.UP));
		}
		if(breakProgress >= 1.0) {
			if(rotate.getBoolean()) {
				rotate(pos);
			}
			start = true;
			mc.thePlayer.sendQueue.addToSendQueue(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.STOP_DESTROY_BLOCK, pos, EnumFacing.UP));
			mc.playerController.onPlayerDestroyBlock(bedPos, EnumFacing.UP);
			breakProgress = 0;
			delayTick = 0;
		}
		if(!start) {
			breakProgress += mc.theWorld.getBlockState(pos).getBlock().getPlayerRelativeBlockHardness(mc.thePlayer, mc.theWorld, pos);
		}
	}
	
	private BlockPos findBed() {
		for (int x = (int) -range.getValue(); x <= range.getValue(); x++) {
	        for (int y = -10; y <= 10; y++) {
	            for (int z = (int) -range.getValue(); z <= range.getValue(); z++) {
	            	BlockPos pos = new BlockPos(mc.thePlayer.posX + (double) x, mc.thePlayer.posY + (double) y, mc.thePlayer.posZ + (double) z);
	                if (mc.theWorld.getBlockState(pos).getBlock() == Blocks.bed) return pos;
	            }
	        }
	    }
	    return null;
	}
	
	private void rotate(BlockPos bp) {
		if(bp != null) {
			rotating = true;
			float[] rots = RotationUtils.getRotationsBlock(bedPos);
			mc.thePlayer.rotationYawHead = rots[0];
			mc.thePlayer.rotationPitchHead = rots[1];
		}
	}

}
