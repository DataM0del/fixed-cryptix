package cryptix.gui.clickgui.element;

import java.awt.Color;
import java.io.IOException;
import java.util.ArrayList;

import net.minecraft.client.Minecraft;
import net.minecraft.client.gui.Gui;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.OpenGlHelper;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.WorldRenderer;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.util.ChatComponentText;

import org.lwjgl.input.Keyboard;
import org.lwjgl.opengl.GL11;

import cryptix.Client;
import cryptix.gui.clickgui.Panel;
import cryptix.gui.clickgui.Setting;
import cryptix.gui.clickgui.element.elements.CheckBox;
import cryptix.gui.clickgui.element.elements.ModeBox;
import cryptix.gui.clickgui.element.elements.Slider;
import cryptix.gui.clickgui.util.ColorUtil;
import cryptix.gui.clickgui.util.FontUtil;
import cryptix.module.Module;

public class ModuleButton {
	public Module mod;
	public ArrayList<Element> menuelements;
	public Panel parent;
	public double x;
	public double y;
	public double width;
	public double height;
	public double settHeight;
	public double allSettHeight;
	public double currentHeight;
	public boolean extended = false;
	public boolean listening = false;

	public ModuleButton(Module imod, Panel pl) {
		mod = imod;
		height = Minecraft.getMinecraft().fontRendererObj.FONT_HEIGHT + 2;
		parent = pl;
		menuelements = new ArrayList<>();
		if (Client.instance.settingsManager.getSettingsByMod(imod) != null)
			for (Setting s : Client.instance.settingsManager.getSettingsByMod(imod)) {
				if (s.isCheck()) {
					menuelements.add(new CheckBox(this, s));
				} else if (s.isSlider()) {
					menuelements.add(new Slider(this, s));
				} else if (s.isCombo()) {
					menuelements.add(new ModeBox(this, s));
				}
			}

	}

	public void drawScreen(int mouseX, int mouseY, float partialTicks) {
	    Color temp = ColorUtil.getClickGUIColor();
	    Color temp1 = ColorUtil.getClickGUIColor2();
	    int color1 = new Color(temp.getRed(), temp.getGreen(), temp.getBlue(), (int) Client.instance.settingsManager.getSettingByName("Color1 Alpha").getValue()).getRGB();
	    int color2 = new Color(temp1.getRed(), temp1.getGreen(), temp1.getBlue(), (int) Client.instance.settingsManager.getSettingByName("Color2 Alpha").getValue()).getRGB();
	    int textcolor = -1;
	    if (mod.isToggled() && parent.currentHeight > this.height) {
	        drawGradientRect(this.x - 2.0, this.y - 1.0, this.x + this.width + 2.0, this.y + 2.0 + this.height + 1.0, color1, color2);
	        textcolor = -1;
	    }

	    if (isHovered(mouseX, mouseY) && parent.currentHeight > this.height) {
	    	Gui.drawRect(this.x - 2.0, this.y - 1.0, this.x + this.width + 2.0, this.y + 2.0 + this.height + 1.0, 0x55111111);
	    }
	    
	    if(parent.currentHeight > this.height) {
	    	FontUtil.drawTotalCenteredStringWithShadow(mod.getName(), x + width / 2, y + height / 1.6, textcolor);
	    }

	}

	public boolean mouseClicked(int mouseX, int mouseY, int mouseButton) {
		if (!isHovered(mouseX, mouseY))
			return false;

		if (mouseButton == 0) {
			mod.toggle();
			
		} else if (mouseButton == 1) {
			if (menuelements != null && menuelements.size() > 0) {
				this.extended = !this.extended;
			}
			if(!this.extended) {
				this.settHeight -= findSettings();
			}else {
				this.settHeight += findSettings();
			}
		} else if (mouseButton == 2) {
			listening = true;
		}
		return true;
	}
	
	public double findSettings() {
		this.allSettHeight = 0;
		if (Client.instance.settingsManager.getSettingsByMod(mod) != null) {
			for (Setting s : Client.instance.settingsManager.getSettingsByMod(mod)) {
				if (s.isSlider()) {
					allSettHeight += 17;
				} else if (s.isCheck()) {
					allSettHeight += 15;
				} else if (s.isCombo()) {
					allSettHeight += 15;
				}
			}
		}else {
			return 0;
		}
		return allSettHeight;
	}

	public boolean keyTyped(char typedChar, int keyCode) throws IOException {
		if (listening) {
			if (keyCode != Keyboard.KEY_ESCAPE) {
				Minecraft.getMinecraft().thePlayer.addChatMessage(new ChatComponentText("Bound '" + mod.getName() + "'" + " to '" + Keyboard.getKeyName(keyCode) + "'"));
				mod.setKey(keyCode);
			} else {
				Minecraft.getMinecraft().thePlayer.addChatMessage(new ChatComponentText("Unbound '" + mod.getName() + "'"));
				mod.setKey(Keyboard.KEY_NONE);
			}
			listening = false;
			return true;
		}
		return false;
	}

	public boolean isHovered(int mouseX, int mouseY) {
		return mouseX >= x && mouseX <= x + width && mouseY >= y && mouseY <= y + height;
	}

}
